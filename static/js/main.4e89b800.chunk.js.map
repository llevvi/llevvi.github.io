{"version":3,"sources":["components/Bio/index.js","components/SocialBox/index.js","components/Footer/index.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["Bio","props","react_default","a","createElement","Fragment","name","tagline","SocialMediaBox","iconsAndLinks","className","map","social_network","key","href","url","target","rel","aria-label","concat","react_fontawesome_index_es","icon","size","Footer","address","SOCIAL_ICONS_AND_LINKS","glyphicon","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","library","add","fab","components_Bio","SocialBox","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAiBeA,EAdH,SAACC,GACX,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,MACXJ,EAAAC,EAAAC,cAAA,UAAKH,EAAMM,kBCuBFC,EAzBQ,SAACP,GAAU,IACxBQ,EAAkBR,EAAlBQ,cACR,OACEP,EAAAC,EAAAC,cAAA,MAAIM,UAAU,qBAEVD,EAAcE,IAAK,SAACC,EAAgBC,GAAjB,OACjBX,EAAAC,EAAAC,cAAA,MAAIS,IAAKA,GACPX,EAAAC,EAAAC,cAAA,KACEU,KAAMF,EAAeG,IACrBC,OAAO,SACPC,IAAI,sBACJC,aAAA,GAAAC,OAAeP,EAAeN,KAA9B,UACAJ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAiBC,KAAM,CAAC,MAAOT,EAAeN,MAAOgB,KAAK,aCIzDC,EAlBA,SAACtB,GAAU,IAChBuB,EAAYvB,EAAZuB,QACR,OACEtB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACfR,EAAAC,EAAAC,cAAA,eACGoB,MCVLC,EAAyB,CAC7B,CACEV,IAAO,mDACPT,KAAQ,YAEV,CACEoB,UAAa,SACbX,IAAO,6BACPT,KAAQ,UAEV,CACES,IAAO,+BACPT,KAAQ,WAEV,CACES,IAAO,iCACPT,KAAQ,cCUGqB,cAfb,SAAAA,EAAY1B,GAAM,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM9B,IACNkC,IAAQC,IAAIC,KAFIT,wEAKhB,OACE1B,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACkC,EAAD,CAAKhC,KAAK,kBAAkBC,QAAQ,2CACpCL,EAAAC,EAAAC,cAACmC,EAAD,CAAW9B,cAAegB,IAC1BvB,EAAAC,EAAAC,cAACoC,EAAD,CAAQhB,QAAQ,wCAVNiB,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4e89b800.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Bio = (props) => {\n  return (\n    <React.Fragment>\n      <h1>{props.name}</h1>\n      <h2>{props.tagline}</h2>\n    </React.Fragment>\n  )\n}\n\nBio.propTypes = {\n  name: PropTypes.string.isRequired,\n  tagline: PropTypes.string.isRequired\n}\n\nexport default Bio","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PropTypes from 'prop-types'\n\n\nconst SocialMediaBox = (props) => {\n  const { iconsAndLinks } = props\n  return (\n    <ul className=\"social-media-list\">\n      {\n        iconsAndLinks.map( (social_network, key) => \n          <li key={key}> \n            <a \n              href={social_network.url} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              aria-label={`${social_network.name} link`}>\n              <FontAwesomeIcon icon={['fab', social_network.name]} size='2x' />\n            </a> \n          </li>\n        )\n      }\n    </ul>\n  )\n}\n\nSocialMediaBox.propTypes = {\n  iconsAndLinks: PropTypes.string.isRequired\n}\n\nexport default SocialMediaBox","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Footer = (props) => {\n  const { address } = props\n  return(\n    <React.Fragment>\n      <footer>\n        <div className='border'></div>\n        <address>\n          {address}\n        </address>\n      </footer>\n    </React.Fragment>\n  )\n}\n\nFooter.propTypes = {\n  address: PropTypes.string.isRequired\n}\n\nexport default Footer","const SOCIAL_ICONS_AND_LINKS = [\n  {\n    'url': 'https://www.linkedin.com/in/leandrovicentesilva/',\n    'name': 'linkedin'\n  },\n  {\n    'glyphicon': 'github',\n    'url': 'https://github.com/llevvi/',\n    'name': 'github'\n  },\n  {\n    'url': 'http://youtube.com/levvitalk',\n    'name': 'youtube'\n  },\n  {\n    'url': 'http://instagram.com/levvitalk',\n    'name': 'instagram'\n  }\n]\n  \nexport { SOCIAL_ICONS_AND_LINKS }","import React, { Component } from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\n\nimport Bio from './components/Bio'\nimport SocialBox from './components/SocialBox'\nimport Footer from './components/Footer'\n\nimport { SOCIAL_ICONS_AND_LINKS } from './constants'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    library.add(fab)\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Bio name='Leandro Vicente' tagline='Software Developer and Content Creator' />\n        <SocialBox iconsAndLinks={SOCIAL_ICONS_AND_LINKS} />\n        <Footer address='Belo Horizonte - MG, Brazil' />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}