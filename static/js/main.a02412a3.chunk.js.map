{"version":3,"sources":["constants.js","components/Bio/index.js","components/SocialBox/index.js","components/Footer/index.js","components/Home/index.js","components/YouTubeList/index.js","App.js","serviceWorker.js","index.js"],"names":["SOCIAL_ICONS_AND_LINKS","url","name","glyphicon","Bio","props","react_default","a","createElement","className","tagline","src","alt","SocialMediaBox","iconsAndLinks","map","social_network","key","href","target","rel","aria-label","concat","react_fontawesome_index_es","icon","size","Footer","address","Fragment","Home","src_components_Bio","SocialBox","src_components_Footer","Component","YouTubeList","window","location","replace","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","library","add","fab","id","BrowserRouter","Switch","Route","exact","path","component","render","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAAMA,SAAyB,CAC7B,CACEC,IAAO,mDACPC,KAAQ,YAEV,CACEC,UAAa,SACbF,IAAO,6BACPC,KAAQ,UAEV,CACED,IAAO,+BACPC,KAAQ,WAEV,CACED,IAAO,iCACPC,KAAQ,eCKGE,EAfH,SAACC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMH,MACXI,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,SACXJ,EAAAC,EAAAC,cAAA,OAAKG,IDWQ,yECXSC,IAAK,kBAAmBH,UAAU,qBCmB/CI,EAzBQ,SAACR,GAAU,IACxBS,EAAkBT,EAAlBS,cACR,OACER,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAEVK,EAAcC,IAAK,SAACC,EAAgBC,GAAjB,OACjBX,EAAAC,EAAAC,cAAA,MAAIS,IAAKA,GACPX,EAAAC,EAAAC,cAAA,KACEU,KAAMF,EAAef,IACrBkB,OAAO,SACPC,IAAI,sBACJC,aAAA,GAAAC,OAAeN,EAAed,KAA9B,UACAI,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAiBC,KAAM,CAAC,MAAOR,EAAed,MAAOuB,KAAK,aCKzDC,SAlBA,SAACrB,GAAU,IAChBsB,EAAYtB,EAAZsB,QACR,OACErB,EAAAC,EAAAC,cAACF,EAAAC,EAAMqB,SAAP,KACEtB,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,eACGmB,OCQIE,mLAVX,OACEvB,EAAAC,EAAAC,cAACF,EAAAC,EAAMqB,SAAP,KACEtB,EAAAC,EAAAC,cAACsB,EAAD,CAAK5B,KAAK,kBAAkBQ,QAAQ,2CACpCJ,EAAAC,EAAAC,cAACuB,EAAD,CAAWjB,cAAed,IAC1BM,EAAAC,EAAAC,cAACwB,EAAD,CAAQL,QAAQ,wCANLM,aCYJC,EATK,WAClB,OACE5B,EAAAC,EAAAC,cAACF,EAAAC,EAAMqB,SAAP,KACEtB,EAAAC,EAAAC,cAAA,wBAPF2B,OAAOC,SAASC,QLcO,4CMOZC,cAnBb,SAAAA,EAAYjC,GAAM,IAAAkC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMrC,IACNyC,IAAQC,IAAIC,KAFIT,wEAMhB,OACEjC,EAAAC,EAAAC,cAAA,OAAKyC,GAAG,gBACN3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjCvB,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOE,KAAK,SAASE,OAAQtB,cAZvBD,aCKEwB,QACW,cAA7BtB,OAAOC,SAASsB,UAEe,UAA7BvB,OAAOC,SAASsB,UAEhBvB,OAAOC,SAASsB,SAASC,MACvB,2DCXNC,IAASJ,OAAOlD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a02412a3.chunk.js","sourcesContent":["const SOCIAL_ICONS_AND_LINKS = [\n  {\n    'url': 'https://www.linkedin.com/in/leandrovicentesilva/',\n    'name': 'linkedin'\n  },\n  {\n    'glyphicon': 'github',\n    'url': 'https://github.com/llevvi/',\n    'name': 'github'\n  },\n  {\n    'url': 'http://youtube.com/levvitalk',\n    'name': 'youtube'\n  },\n  {\n    'url': 'http://instagram.com/levvitalk',\n    'name': 'instagram'\n  }\n]\n\nconst SUBSCRIBE_FORM_URL = 'https://goo.gl/forms/A3zRVgzeH3BMD2FJ3'\n\nconst AVATAR_URL = 'https://www.gravatar.com/avatar/5a00d4ad57ed2f688007462c4736fa75?s=600'\n  \nexport { SOCIAL_ICONS_AND_LINKS, SUBSCRIBE_FORM_URL, AVATAR_URL }","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './index.css'\n\nimport { AVATAR_URL } from '../../constants'\n\nconst Bio = (props) => {\n  return (\n    <div className='bio'>\n      <h1>{props.name}</h1>\n      <h2>{props.tagline}</h2>\n      <img src={AVATAR_URL} alt={'Leandro profile'} className='avatar' />\n    </div>\n  )\n}\n\nBio.propTypes = {\n  name: PropTypes.string.isRequired,\n  tagline: PropTypes.string.isRequired\n}\n\nexport default Bio","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PropTypes from 'prop-types'\n\n\nconst SocialMediaBox = (props) => {\n  const { iconsAndLinks } = props\n  return (\n    <ul className=\"social-media-list\">\n      {\n        iconsAndLinks.map( (social_network, key) => \n          <li key={key}> \n            <a \n              href={social_network.url} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              aria-label={`${social_network.name} link`}>\n              <FontAwesomeIcon icon={['fab', social_network.name]} size='2x' />\n            </a> \n          </li>\n        )\n      }\n    </ul>\n  )\n}\n\nSocialMediaBox.propTypes = {\n  iconsAndLinks: PropTypes.array.isRequired\n}\n\nexport default SocialMediaBox","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './index.css'\n\nconst Footer = (props) => {\n  const { address } = props\n  return(\n    <React.Fragment>\n      <footer>\n        <div className='border'></div>\n        <address>\n          {address}\n        </address>\n      </footer>\n    </React.Fragment>\n  )\n}\n\nFooter.propTypes = {\n  address: PropTypes.string.isRequired\n}\n\nexport default Footer","import React, {Component} from 'react'\nimport Bio from '../Bio'\nimport SocialBox from '../SocialBox'\nimport Footer from '../Footer'\n\nimport { SOCIAL_ICONS_AND_LINKS } from '../../constants'\n\nclass Home extends Component {\n  render() {\n    return(\n      <React.Fragment>\n        <Bio name='Leandro Vicente' tagline='Software Developer and Content Creator' />\n        <SocialBox iconsAndLinks={SOCIAL_ICONS_AND_LINKS} />\n        <Footer address='Belo Horizonte - MG, Brazil' />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Home","import React from 'react'\n\nimport { SUBSCRIBE_FORM_URL } from '../../constants'\n\nconst redirectToSubscribeForm = () => {\n  return (\n    window.location.replace(SUBSCRIBE_FORM_URL)\n  )\n} \n\nconst YouTubeList = () => {\n  return(\n    <React.Fragment>\n      <h1>Loading...</h1>\n      { redirectToSubscribeForm() }\n    </React.Fragment>\n  )\n}\n\nexport default YouTubeList","import React, { Component } from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Home from './components/Home'\nimport YouTubeList from './components/YouTubeList'\nclass App extends Component {\n  constructor(props){\n    super(props)\n    library.add(fab)\n  }\n\n  render() {\n    return (\n      <div id='content-wrap'>\n        <Router>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/lista' render={YouTubeList} />\n          </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}