{"version":3,"sources":["constants.js","components/Bio/index.js","components/SocialBox/index.js","components/Footer/index.js","components/ContactBox/index.js","components/Home/index.js","components/YouTubeList/index.js","App.js","serviceWorker.js","index.js"],"names":["SOCIAL_ICONS_AND_LINKS","url","name","glyphicon","Bio","props","react_default","a","createElement","className","tagline","src","alt","SocialMediaBox","iconsAndLinks","map","social_network","key","href","target","rel","aria-label","concat","react_fontawesome_index_es","icon","size","Footer","address","Fragment","GOOGLE_FORM_MESSAGE_ID","GOOGLE_FORM_EMAIL_ID","GOOGLE_FORM_ACTION","ContactBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","value","handleSubmit","preventDefault","sendingMessage","sendMessage","handleFormToggle","prevState","showForm","handleReturnButton","messageSent","messageError","formData","FormData","append","state","message","email","axios","post","then","catch","returnButton","id","onClick","onSubmit","htmlFor","type","onChange","required","rows","Component","Home","src_components_Bio","SocialBox","src_components_ContactBox","src_components_Footer","YouTubeList","window","location","replace","App","library","add","fab","BrowserRouter","Switch","Route","exact","path","component","render","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac3fd052.chunk.js","sourcesContent":["const SOCIAL_ICONS_AND_LINKS = [\n  {\n    'url': 'https://www.linkedin.com/in/leandrovicentesilva/',\n    'name': 'linkedin'\n  },\n  {\n    'glyphicon': 'github',\n    'url': 'https://github.com/llevvi/',\n    'name': 'github'\n  },\n  {\n    'url': 'http://youtube.com/levvitalk',\n    'name': 'youtube'\n  },\n  {\n    'url': 'http://instagram.com/levvitalk',\n    'name': 'instagram'\n  }\n]\n\nconst SUBSCRIBE_FORM_URL = 'https://goo.gl/forms/A3zRVgzeH3BMD2FJ3'\n\nconst AVATAR_URL = 'https://www.gravatar.com/avatar/5a00d4ad57ed2f688007462c4736fa75?s=600'\n  \nexport { SOCIAL_ICONS_AND_LINKS, SUBSCRIBE_FORM_URL, AVATAR_URL }","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './index.css'\n\nimport { AVATAR_URL } from '../../constants'\n\nconst Bio = (props) => {\n  return (\n    <div className='bio'>\n      <h1>{props.name}</h1>\n      <h2>{props.tagline}</h2>\n      <img src={AVATAR_URL} alt={'Leandro profile'} className='avatar' />\n    </div>\n  )\n}\n\nBio.propTypes = {\n  name: PropTypes.string.isRequired,\n  tagline: PropTypes.string.isRequired\n}\n\nexport default Bio","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PropTypes from 'prop-types'\n\n\nconst SocialMediaBox = (props) => {\n  const { iconsAndLinks } = props\n  return (\n    <ul className=\"social-media-list\">\n      {\n        iconsAndLinks.map( (social_network, key) => \n          <li key={key}> \n            <a \n              href={social_network.url} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              aria-label={`${social_network.name} link`}>\n              <FontAwesomeIcon icon={['fab', social_network.name]} size='2x' />\n            </a> \n          </li>\n        )\n      }\n    </ul>\n  )\n}\n\nSocialMediaBox.propTypes = {\n  iconsAndLinks: PropTypes.array.isRequired\n}\n\nexport default SocialMediaBox","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './index.css'\n\nconst Footer = (props) => {\n  const { address } = props\n  return(\n    <React.Fragment>\n      <footer>\n        <div className='border'></div>\n        <address>\n          {address}\n        </address>\n      </footer>\n    </React.Fragment>\n  )\n}\n\nFooter.propTypes = {\n  address: PropTypes.string.isRequired\n}\n\nexport default Footer","import React, { Component } from 'react'\nimport axios from 'axios'\nimport './index.css'\n\nconst GOOGLE_FORM_MESSAGE_ID = 'entry.1249636003'\nconst GOOGLE_FORM_EMAIL_ID = 'entry.1157005188'\nconst GOOGLE_FORM_ACTION = 'https://docs.google.com/forms/d/e/1FAIpQLScJX66KS2GUD1Ci-piKoPbsracqXFjJr7kSWd3yAin_vgk7OQ/formResponse'\n\nclass ContactBox extends Component {\n  constructor(props){\n    super(props)\n    this.state = { \n      message: '', \n      email: '', \n      showForm: false,\n      sendingMessage: false,\n      messageSent: false,\n      messageError: false\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    this.setState({\n      sendingMessage: true\n    })\n    this.sendMessage()\n  }\n\n  handleFormToggle = () => {\n    this.setState( \n      (prevState) => {\n        const { showForm } = prevState\n        return {\n          showForm: !showForm\n        } \n      }\n    )\n  }\n\n  handleReturnButton = () => {\n    this.setState(\n      {\n        showForm: false,\n        messageSent: false,\n        messageError: false\n      }\n    )\n  }\n\n  sendMessage = () => {\n    const formData = new FormData()\n    formData.append(GOOGLE_FORM_MESSAGE_ID, this.state.message)\n    formData.append(GOOGLE_FORM_EMAIL_ID, this.state.email)\n\n    axios.post(GOOGLE_FORM_ACTION,formData)\n      .then(() => {\n        this.setState({ \n          messageSent: true,\n          sendingMessage: false,\n          message: '',\n          email: ''\n        })\n      }).catch(() => {\n        this.setState({ \n          messageError: true,\n          sendingMessage: false\n        })\n      })\n  }\n\n  returnButton = () => <button id='return-button' className='btn btn-default btn-xs' onClick={this.handleReturnButton}>Return</button>\n\n  render() {\n    if(this.state.sendingMessage){\n      return(\n        <div>Sending...</div>\n      )\n    }\n\n    if(this.state.messageSent){\n      return(\n        <React.Fragment>\n          <div className='success-message'>Sent! I will respond asap</div>\n          {this.returnButton()}\n        </React.Fragment>\n      )\n    }\n\n    if(this.state.messageError){\n      return(\n        <React.Fragment>\n          <div className='error-message'>Sorry, your message was not sent. Contact me at: leandrovicente.info@gmail.com</div>\n          {this.returnButton()}\n        </React.Fragment>\n      )\n    }\n\n    if(this.state.showForm === false){\n      return(\n        <button id='contact-button' className='btn btn-sm' onClick={this.handleFormToggle}>Contact</button>\n      )\n    }\n\n    return(\n      <React.Fragment>\n        <div className='form-container'>\n          <form onSubmit={this.handleSubmit}>\n            <div className='form-group row'>\n              <label htmlFor='email' className='col-sm-2 col-form-label'>\n                Email:\n              </label>\n              <div className='col-sm-8'>\n                <input \n                  type='email' \n                  name='email'\n                  id='email'\n                  className='form-control'\n                  value={this.state.email} \n                  onChange={this.handleChange}\n                  required\n                />\n              </div>\n            </div>\n            <div className='form-group row'>\n              <label htmlFor='message' className='col-sm-2 col-form-label'>\n                Message:\n              </label>\n              <div className='col-sm-8'>\n                <textarea \n                  id='message'\n                  name='message'\n                  className='form-control'\n                  required\n                  value={this.state.message} \n                  onChange={this.handleChange} \n                  rows='6'\n                />\n              </div>\n            </div>\n            <div>\n              <button type='button' id='cancel-button' className='btn btn-default btn-sm btn-action' onClick={this.handleFormToggle}>Cancel</button>\n              <button type='submit' className='btn btn-sm btn-default btn-action'>Submit</button>\n            </div>\n          </form>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default ContactBox","import React, {Component} from 'react'\nimport Bio from '../Bio'\nimport SocialBox from '../SocialBox'\nimport Footer from '../Footer'\nimport ContactBox from '../ContactBox'\n\nimport { SOCIAL_ICONS_AND_LINKS } from '../../constants'\n\nclass Home extends Component {\n  render() {\n    return(\n      <React.Fragment>\n        <Bio name='Leandro Vicente' tagline='Software Developer and Content Creator' />\n        <SocialBox iconsAndLinks={SOCIAL_ICONS_AND_LINKS} />\n        <ContactBox /> \n        <Footer address='Belo Horizonte - MG, Brazil' />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Home","import React from 'react'\n\nimport { SUBSCRIBE_FORM_URL } from '../../constants'\n\nconst redirectToSubscribeForm = () => {\n  return (\n    window.location.replace(SUBSCRIBE_FORM_URL)\n  )\n} \n\nconst YouTubeList = () => {\n  return(\n    <React.Fragment>\n      <h1>Loading...</h1>\n      { redirectToSubscribeForm() }\n    </React.Fragment>\n  )\n}\n\nexport default YouTubeList","import React, { Component } from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Home from './components/Home'\nimport YouTubeList from './components/YouTubeList'\nclass App extends Component {\n  constructor(props){\n    super(props)\n    library.add(fab)\n  }\n\n  render() {\n    return (\n      <div id='content-wrap'>\n        <Router>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/lista' render={YouTubeList} />\n          </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}